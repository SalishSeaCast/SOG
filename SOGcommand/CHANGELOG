Changelog
---------

v1.3.2
------

* Pin colander version at >=1.0b1.


v1.3.1
------

* Fix issue re: serialized rendering of `default=None` for units.
  Colander v1.0b1 changed the rendering from `colander.null` to "None".
  See http://docs.pylonsproject.org/projects/colander/en/latest/changes.html#b1-2013-09-01 for details.


v1.3
----

* Implement the :command:`SOG batch` command to run a collection of jobs
  (described in a YAML file). Support for running jobs concurrently is
  included.


v1.2.2
------

* Fix Unicode handling issue in :py:mod:`SOG_infile_schema` string type
  checking code that brown-bagged v1.2.1 under Pythnon 2.7.

* Add six library to project dependencies to facilitate Python 3.3 and 2.7
  common codebase.


v1.2.1
------

* v1.2.1 was a brown-paper-bag release due to a Unicode handling difference
  issue between Python 2.7 and 3.3 that was not properly accommodated.
  It was usable under Python 3.3, but not under 2.7.

* Change license to Apache License, Version 2.0 and add necessary license
  files and information for public release on Bitbucket.

* Add error handling for the case of a YAML infile element that is in the
  schema but missing from the infile.

* Port code to work under both Python 2.7 and 3.3. Use :program:`tox` for
  multi-version testing.

* Drop support for Python 2.6.

* Add an API for the :command:`SOG read_infile` command so that it can be
  used by other Python packages (e.g. SoG-bloomcast) without the overhead
  of launching a subprocess.

* Add :option:`--editfile` to :command:`SOG read_infile` command to allow
  YAML infile snippets to be merged into the base YAML infile.

* Change to use :func:`yaml.safe_load` to improve security by preventing
  arbitrary Python objects from being loaded from YAML infiles.


v1.2
----

* Change the signature of the :func:`SOG_YAML_schema.yaml_to_infile`
  and the :func:`SOG_infile_schema.infile_to_yaml` functions to reflect
  a change in the Colander 1.0 library API.

* Implement handling for average/historical forcing data,
  and document the process.

* Add an API for the :command:`SOG run` command so that it can be used by
  other Python packages (e.g. SoG-bloomcast) without the overhead of
  launching a subprocess.


v1.1
~~~~

* Implement handling for optional parameters in infile, and add
  optional parameters for northern return flow influence, and forcing
  quantities variations to infile schemas.


v1.1c1
~~~~

* Add :option:`--editfile` to :command:`SOG run` command to allow YAML
  infile snippets to be merged into the base YAML infile.

* Outfile now defaults to ./INFILE.out; i.e. outfile goes to the directory
  that the run is started in by default, not the directory the infile is in.
  Use the :option:`--output` option to specify the outfile path/name if
  something other than the default is required.

* Add :option:`--legacy-infile` option to :command:`SOG run` command to
  allow legacy, Fortran-style infiles to be used.


v1.0
~~~~

* User docs in repository and rendered at
  http://eos.ubc.ca/~sallen/SOG-docs/SOGcommand

* Installation docs in repository and rendered at
  http://eos.ubc.ca/~sallen/SOG-docs/quickstart.html#sog-command-processor


v1.0c1
~~~~~~

* :command:`SOG run` command to run SOG with a given infile and
  various options. See :command:`SOG help run` for details.

* SOG command processor framework based on:

  * stdlib cmd module for first level command handling, help text,
    etc.
  * argparse module for argument and option handling for individual
    commands. argparse is a 3rd party library for Python 2.6, in
    stdlib for Python >=2.7 and >=3.2.
